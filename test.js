var tap = require('tap')
var commaNumber = require('./index.js')

function testEach(pairs, t, format) {
  t.plan(pairs.length)
  pairs.forEach(function (pair) {
    var input, actual, expected, inputString, description

    input = pair[0]
    actual = format(input)
    expected = pair[1]
    inputString =
      ('object' === typeof input)
      ? JSON.stringify(input)
      : ('string' === typeof input)
        ? '\'' + input + '\''
        : input
    description = inputString + ' => ' + expected

    t.equal(actual, expected, description)
  })
}

tap.test('Formatting', function (t) {

  var testPairs

  testPairs = [
    // Positive numbers
    [0, '0'],
    [1, '1'],
    [12, '12'],
    [123, '123'],
    [1234, '1,234'],
    [12345, '12,345'],
    [123456, '123,456'],
    [1234567, '1,234,567'],
    [12345678, '12,345,678'],
    [123456789, '123,456,789'],
    [1234567890, '1,234,567,890'],
    [12345678901, '12,345,678,901'],
    [123456789012, '123,456,789,012'],
    [1234567890123, '1,234,567,890,123'],
    [Infinity, 'Infinity'],

    // With decimals
    [.1, '0.1'],
    [.12, '0.12'],
    [.123, '0.123'],
    [1.2, '1.2'],
    [1.23, '1.23'],
    [1.234, '1.234'],
    [12.3, '12.3'],
    [12.34, '12.34'],
    [123.4, '123.4'],
    [123.45, '123.45'],
    [1234.5, '1,234.5'],
    [1234.56, '1,234.56'],
    [12345.6, '12,345.6'],
    [12345.67, '12,345.67'],
    [123456.7, '123,456.7'],
    [123456.78, '123,456.78'],
    [123456.789, '123,456.789'],
    [1234567.8, '1,234,567.8'],
    [1234567.89, '1,234,567.89'],
    [1234567.899, '1,234,567.899'],
    [12345678.9, '12,345,678.9'],
    [12345678.99, '12,345,678.99'],
    [12345678.999, '12,345,678.999'],
    [123456789.1, '123,456,789.1'],
    [123456789.12, '123,456,789.12'],
    [123456789.123, '123,456,789.123'],
    [1234567890.1, '1,234,567,890.1'],
    [1234567890.12, '1,234,567,890.12'],
    [1234567890.123, '1,234,567,890.123'],
    [12345678901.2, '12,345,678,901.2'],
    [12345678901.23, '12,345,678,901.23'],
    [12345678901.234, '12,345,678,901.234'],
    [123456789012.3, '123,456,789,012.3'],
    [123456789012.34, '123,456,789,012.34'],
    [123456789012.345, '123,456,789,012.345'],
    [1234567890123.4, '1,234,567,890,123.4'],
    [1234567890123.45, '1,234,567,890,123.45'],
    [1234567890123.456, '1,234,567,890,123.456'],

    // Negative numbers
    [-1, '-1'],
    [-12, '-12'],
    [-123, '-123'],
    [-1234, '-1,234'],
    [-12345, '-12,345'],
    [-123456, '-123,456'],
    [-1234567, '-1,234,567'],
    [-12345678, '-12,345,678'],
    [-123456789, '-123,456,789'],
    [-1234567890, '-1,234,567,890'],
    [-12345678901, '-12,345,678,901'],
    [-123456789012, '-123,456,789,012'],
    [-1234567890123, '-1,234,567,890,123'],
    [-Infinity, '-Infinity'],

    // With decimals
    [-.1, '-0.1'],
    [-.12, '-0.12'],
    [-.123, '-0.123'],
    [-1.2, '-1.2'],
    [-1.23, '-1.23'],
    [-1.234, '-1.234'],
    [-12.3, '-12.3'],
    [-12.34, '-12.34'],
    [-123.4, '-123.4'],
    [-123.45, '-123.45'],
    [-1234.5, '-1,234.5'],
    [-1234.56, '-1,234.56'],
    [-12345.6, '-12,345.6'],
    [-12345.67, '-12,345.67'],
    [-123456.7, '-123,456.7'],
    [-123456.78, '-123,456.78'],
    [-123456.789, '-123,456.789'],
    [-1234567.8, '-1,234,567.8'],
    [-1234567.89, '-1,234,567.89'],
    [-1234567.899, '-1,234,567.899'],
    [-12345678.9, '-12,345,678.9'],
    [-12345678.99, '-12,345,678.99'],
    [-12345678.999, '-12,345,678.999'],
    [-123456789.1, '-123,456,789.1'],
    [-123456789.12, '-123,456,789.12'],
    [-123456789.123, '-123,456,789.123'],
    [-1234567890.1, '-1,234,567,890.1'],
    [-1234567890.12, '-1,234,567,890.12'],
    [-1234567890.123, '-1,234,567,890.123'],
    [-12345678901.2, '-12,345,678,901.2'],
    [-12345678901.23, '-12,345,678,901.23'],
    [-12345678901.234, '-12,345,678,901.234'],
    [-123456789012.3, '-123,456,789,012.3'],
    [-123456789012.34, '-123,456,789,012.34'],
    [-123456789012.345, '-123,456,789,012.345'],
    [-1234567890123.4, '-1,234,567,890,123.4'],
    [-1234567890123.45, '-1,234,567,890,123.45'],
    [-1234567890123.456, '-1,234,567,890,123.456'],

    // Strings
    ['0', '0'],
    ['1', '1'],
    ['12', '12'],
    ['123', '123'],
    ['1234', '1,234'],
    ['12345', '12,345'],
    ['123456', '123,456'],
    ['1234567', '1,234,567'],
    ['12345678', '12,345,678'],
    ['123456789', '123,456,789'],
    ['1234567890', '1,234,567,890'],
    ['12345678901', '12,345,678,901'],
    ['123456789012', '123,456,789,012'],
    ['1234567890123', '1,234,567,890,123'],

    // With decimals
    ['.1', '.1'],
    ['0.1', '0.1'],
    ['.12', '.12'],
    ['0.12', '0.12'],
    ['.123', '.123'],
    ['0.123', '0.123'],
    ['1.2', '1.2'],
    ['1.23', '1.23'],
    ['1.234', '1.234'],
    ['12.3', '12.3'],
    ['12.34', '12.34'],
    ['123.4', '123.4'],
    ['123.45', '123.45'],
    ['1234.5', '1,234.5'],
    ['1234.56', '1,234.56'],
    ['12345.6', '12,345.6'],
    ['12345.67', '12,345.67'],
    ['123456.7', '123,456.7'],
    ['123456.78', '123,456.78'],
    ['123456.789', '123,456.789'],
    ['1234567.8', '1,234,567.8'],
    ['1234567.89', '1,234,567.89'],
    ['1234567.899', '1,234,567.899'],
    ['12345678.9', '12,345,678.9'],
    ['12345678.99', '12,345,678.99'],
    ['12345678.999', '12,345,678.999'],
    ['123456789.1', '123,456,789.1'],
    ['123456789.12', '123,456,789.12'],
    ['123456789.123', '123,456,789.123'],
    ['1234567890.1', '1,234,567,890.1'],
    ['1234567890.12', '1,234,567,890.12'],
    ['1234567890.123', '1,234,567,890.123'],
    ['12345678901.2', '12,345,678,901.2'],
    ['12345678901.23', '12,345,678,901.23'],
    ['12345678901.234', '12,345,678,901.234'],
    ['123456789012.3', '123,456,789,012.3'],
    ['123456789012.34', '123,456,789,012.34'],
    ['123456789012.345', '123,456,789,012.345'],
    ['1234567890123.4', '1,234,567,890,123.4'],
    ['1234567890123.45', '1,234,567,890,123.45'],
    ['1234567890123.456', '1,234,567,890,123.456'],

    // Negative numbers
    ['-1', '-1'],
    ['-12', '-12'],
    ['-123', '-123'],
    ['-1234', '-1,234'],
    ['-12345', '-12,345'],
    ['-123456', '-123,456'],
    ['-1234567', '-1,234,567'],
    ['-12345678', '-12,345,678'],
    ['-123456789', '-123,456,789'],
    ['-1234567890', '-1,234,567,890'],
    ['-12345678901', '-12,345,678,901'],
    ['-123456789012', '-123,456,789,012'],
    ['-1234567890123', '-1,234,567,890,123'],
    [-Infinity, '-Infinity'],

    // With decimals
    ['-.1', '-.1'],
    ['-.12', '-.12'],
    ['-.123', '-.123'],
    ['-1.2', '-1.2'],
    ['-1.23', '-1.23'],
    ['-1.234', '-1.234'],
    ['-12.3', '-12.3'],
    ['-12.34', '-12.34'],
    ['-123.4', '-123.4'],
    ['-123.45', '-123.45'],
    ['-1234.5', '-1,234.5'],
    ['-1234.56', '-1,234.56'],
    ['-12345.6', '-12,345.6'],
    ['-12345.67', '-12,345.67'],
    ['-123456.7', '-123,456.7'],
    ['-123456.78', '-123,456.78'],
    ['-123456.789', '-123,456.789'],
    ['-1234567.8', '-1,234,567.8'],
    ['-1234567.89', '-1,234,567.89'],
    ['-1234567.899', '-1,234,567.899'],
    ['-12345678.9', '-12,345,678.9'],
    ['-12345678.99', '-12,345,678.99'],
    ['-12345678.999', '-12,345,678.999'],
    ['-123456789.1', '-123,456,789.1'],
    ['-123456789.12', '-123,456,789.12'],
    ['-123456789.123', '-123,456,789.123'],
    ['-1234567890.1', '-1,234,567,890.1'],
    ['-1234567890.12', '-1,234,567,890.12'],
    ['-1234567890.123', '-1,234,567,890.123'],
    ['-12345678901.2', '-12,345,678,901.2'],
    ['-12345678901.23', '-12,345,678,901.23'],
    ['-12345678901.234', '-12,345,678,901.234'],
    ['-123456789012.3', '-123,456,789,012.3'],
    ['-123456789012.34', '-123,456,789,012.34'],
    ['-123456789012.345', '-123,456,789,012.345'],
    ['-1234567890123.4', '-1,234,567,890,123.4'],
    ['-1234567890123.45', '-1,234,567,890,123.45'],
    ['-1234567890123.456', '-1,234,567,890,123.456'],

  ]

  testEach(testPairs, t, commaNumber)
  // t.plan(testPairs.length)
  // testPairs.forEach(function (pair) {
  //   var input, actual, expected, inputString, description
  //
  //   input = pair[0]
  //   actual = format(input)
  //   expected = pair[1]
  //   inputString =
  //     ('object' === typeof input)
  //     ? JSON.stringify(input)
  //     : ('string' === typeof input)
  //       ? '\'' + input + '\''
  //       : input
  //   description = inputString + ' => ' + expected
  //
  //   t.equal(actual, expected, description)
  // })
})

tap.test('Invalid input', function (t) {

  var input

  input = [
    [],
    {},
    null,
    undefined,
    'abc',
  ]

  t.plan(6)
  t.equal(commaNumber(input[0]), input[0], '[] => []')
  t.equal(commaNumber(input[1]), input[1], '{} => {}')
  t.equal(commaNumber(input[2]), input[2], 'null => null')
  t.equal(commaNumber(input[3]), input[3], 'undefined => undefined')
  t.equal(commaNumber(input[4]), input[4], '\'abc\' => \'abc\'')

  t.equal(isNaN(commaNumber(NaN)), true, 'NaN => NaN')
})

tap.test('Separator with string inputs', function (t) {
  t.plan(6)
  t.equal(commaNumber('1000', ' '), '1 000', '1000 => 1 000')
  t.equal(commaNumber('1000', '.'), '1.000', '1000 => 1.000')
  t.equal(commaNumber('-1000', '.'), '-1.000', '-1000 => -1.000')
  t.equal(commaNumber('1000.12', ' '), '1 000.12', '1000.12 => 1 000.12')
  t.equal(commaNumber('1000.12', '.'), '1.000.12', '1000.12 => 1.000.12')
  t.equal(commaNumber('-1000.12', '.'), '-1.000.12', '-1000.12 => -1.000.12')
})

tap.test('Separator with number inputs', function (t) {
  t.plan(6)
  t.equal(commaNumber(1000, ' '), '1 000', '1000 => 1 000')
  t.equal(commaNumber(1000, '.'), '1.000', '1000 => 1.000')
  t.equal(commaNumber(-1000, '.'), '-1.000', '-1000 => -1.000')
  t.equal(commaNumber(1000.12, ' '), '1 000.12', '1000.12 => 1 000.12')
  t.equal(commaNumber(1000.12, '.'), '1.000.12', '1000.12 => 1.000.12')
  t.equal(commaNumber(-1000.12, '.'), '-1.000.12', '-1000.12 => -1.000.12')
})

tap.test('Decimal Separator with string inputs', function (t) {
  t.plan(6)
  t.equal(commaNumber('1234.5', undefined, '.'), '1,234.5', '1234.5 => 1,234.5')
  t.equal(commaNumber('1234,5', '.', ','), '1.234,5', '1234,5 => 1.234,5')
  t.equal(commaNumber('1234 5', undefined, ' '), '1,234 5', '1234 5 => 1,234 5')
  t.equal(commaNumber('-1234.5', undefined, '.'), '-1,234.5', '-1234.5 => -1,234.5')
  t.equal(commaNumber('-1234,5', '.', ','), '-1.234,5', '-1234,5 => -1.234,5')
  t.equal(commaNumber('-1234 5', undefined, ' '), '-1,234 5', '-1234 5 => -1,234 5')
})

tap.test('Decimal Separator with number inputs', function (t) {
  t.plan(6)
  t.equal(commaNumber(1234.5, undefined, '.'), '1,234.5', '1234.5 => 1,234.5')
  t.equal(commaNumber(1234.5, '.', ','), '1.234,5', '1234,5 => 1.234,5')
  t.equal(commaNumber(1234.5, undefined, ' '), '1,234 5', '1234 5 => 1,234 5')
  t.equal(commaNumber(-1234.5, undefined, '.'), '-1,234.5', '-1234.5 => -1,234.5')
  t.equal(commaNumber(-1234.5, '.', ','), '-1.234,5', '-1234,5 => -1.234,5')
  t.equal(commaNumber(-1234.5, undefined, ' '), '-1,234 5', '-1234 5 => -1,234 5')
})

tap.test('bindWith() and string inputs', function (t) {

  var boundVersion, testPairs

  boundVersion = commaNumber.bindWith('_', '!')

  testPairs = [
    ['1234!56', '1_234!56'],
    ['1234567!89', '1_234_567!89'],
    ['1234567890!12', '1_234_567_890!12'],
    ['-1234!56', '-1_234!56'],
    ['-1234567!89', '-1_234_567!89'],
    ['-1234567890!12', '-1_234_567_890!12'],
  ]

  testEach(testPairs, t, boundVersion)
})

tap.test('bindWith() and number inputs', function (t) {

  var boundVersion, testPairs

  boundVersion = commaNumber.bindWith('_', '!')

  testPairs = [
    [1234.56, '1_234!56'],
    [1234567.89, '1_234_567!89'],
    [1234567890.12, '1_234_567_890!12'],
    [-1234.56, '-1_234!56'],
    [-1234567.89, '-1_234_567!89'],
    [-1234567890.12, '-1_234_567_890!12'],
  ]

  testEach(testPairs, t, boundVersion)
})
